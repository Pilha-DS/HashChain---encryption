tables = {
    7: {
        "a": "#*#####",
        "A": "#*###*#",
        "b": "##*####",
        "B": "##*##*#",
        "c": "###*###",
        "C": "###*#*#",
        "d": "####*##",
        "D": "####**#",
        "e": "#####*#",
        "E": "#####*#",
        "f": "#*##**#",
        "F": "#**#**#",
        "g": "#*#***#",
        "G": "#*****#",
    },
    8: {
        "a": "#*######",
        "A": "#*####*#",
        "b": "##*#####",
        "B": "##*###*#",
        "c": "###*####",
        "C": "###*##*#",
        "d": "####*###",
        "D": "####*#*#",
        "e": "#####*##",
        "E": "#####**#",
        "f": "######*#",
        "F": "#*####*#",
        "g": "#####**#",
        "G": "####***#",
    },
    9: {
        "a": "#*#######",
        "A": "#*#####*#",
        "b": "##*######",
        "B": "##*####*#",
        "c": "###*#####",
        "C": "###*###*#",
        "d": "####*####",
        "D": "####*##*#",
        "e": "#####*###",
        "E": "#####*#*#",
        "f": "######*##",
        "F": "######**#",
        "g": "#######*#",
        "G": "#*#####*#",
    },
}

inverted_tables = {k: {v: kk for kk, v in d.items()} for k, d in tables.items()}


def generate_tables(seed: int):
    global tables
    global inverted_tables
    inverted_tables = {k: {v: kk for kk, v in d.items()} for k, d in tables.items()}
    return (f"Tabelas geradas. (qnd estiver pronto, com a seed: {seed})")


def main():
    pass


if __name__ == "__main__":
    main()
